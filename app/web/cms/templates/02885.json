{"content":{"type":"API","structure":"","server_on_load":"async ({\n  template,\n  params,\n  render,\n  db,\n  req,\n  reply,\n  user,\n  log,\n  ext,\n  isDev,\n}: Server) => {\n  try {\n    const data = await req.file({\n      limits: {\n        fileSize: 2000000, // 2MB\n      },\n    });\n\n    const file = data.filename.split(\".\");\n    const filename = file.slice(0, -1).join(\".\");\n    // const mimeType = data.mimetype;\n    const extension = file[file.length - 1];\n\n    const path = !!data.fields.path ? data.fields.path.value : \"/\";\n\n    const name =\n      (!!data.fields.name ? data.fields.name.value : filename) +\n      Date.now() +\n      \".\" +\n      extension;\n\n    const dir = ext.path.join(\n      __dirname,\n      \"..\",\n      \"..\",\n      \"..\",\n      \"uploads/customer\",\n      path\n    );\n\n    const fullpath = dir + name;\n\n    if (!ext.fs.existsSync(dir)) {\n      ext.fs.mkdirSync(dir);\n    }\n\n    await ext.pump(data.file, ext.fs.createWriteStream(fullpath));\n    const filePath = await ext.path\n      .join(\"/upload/customer\", path, name)\n      .replace(/\\\\/gi, \"/\");\n\n    const customer = await db.customer.update({\n      where: {\n        id: Number(params.id),\n      },\n      data: {\n        surat_ket_pt: filePath,\n      },\n    });\n\n    reply.send({\n      status: \"ok\",\n      path: filePath,\n      customer,\n    });\n  } catch (e) {\n    reply.send({ status: \"failed\", reason: e.toString() });\n  }\n}","figma":{}},"title":"upload-file","type":"cms-template","lang":"","status":"SYSTEM","parent_id":"66283","slug":"/api/customer/[id]/upload","site":"*","id":"02885"}