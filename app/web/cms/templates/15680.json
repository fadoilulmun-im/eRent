{"content":{"type":"API","structure":"","server_on_load":"async ({\n  template,\n  params,\n  render,\n  db,\n  req,\n  reply,\n  user,\n  log,\n  ext,\n  isDev,\n}: Server) => {\n  if (user.user.role == \"guest\") {\n    return reply.status(401).send({\n      status: \"ERROR\",\n      message: \"Silahkan login terlebih dahulu\",\n    });\n  }\n\n  const cek = await db.transaksi.findUnique({\n    where: {\n      id: Number(params.id),\n    },\n    select: {\n      bukti_pembayaran: true,\n    },\n  });\n  if (cek.bukti_pembayaran) {\n    return reply.status(409).send({\n      status: \"ERROR\",\n      message: \"Anda sudah pernah upload bukti sebelumnya\",\n      data: cek.bukti_pembayaran,\n    });\n  }\n\n  try {\n    const data = await req.file({\n      limits: {\n        fileSize: 2000000, // 2MB\n      },\n    });\n\n    const file = data.filename.split(\".\");\n    const filename = file.slice(0, -1).join(\".\");\n    // const mimeType = data.mimetype;\n    const extension = file[file.length - 1];\n\n    const valid_extension = [\"png\", \"pdf\", \"svg\", \"jpg\", \"jpeg\"];\n    if (!valid_extension.includes(extension)) {\n      return reply.status(400).send({\n        status: \"ERROR\",\n        message: \"File yang dimasukkan tidak valid\",\n      });\n    }\n\n    const path = !!data.fields.path ? data.fields.path.value : \"/\";\n\n    const name =\n      (!!data.fields.name ? data.fields.name.value : filename) +\n      Date.now() +\n      \".\" +\n      extension;\n\n    const dir = ext.path.join(\n      __dirname,\n      \"..\",\n      \"..\",\n      \"..\",\n      \"uploads\",\n      \"transaksi\",\n      \"bukti_pembayaran\",\n      path\n    );\n\n    const fullpath = dir + name;\n\n    if (!ext.fs.existsSync(dir)) {\n      ext.fs.mkdirSync(dir, { recursive: true });\n    }\n\n    await ext.pump(data.file, ext.fs.createWriteStream(fullpath));\n    const filePath = await ext.path\n      .join(\"/upload/transaksi/bukti_pembayaran\", path, name)\n      .replace(/\\\\/gi, \"/\");\n\n    const transaksi = db.transaksi.update({\n      where: {\n        id: Number(params.id),\n      },\n      data: {\n        bukti_pembayaran: filePath,\n        status_transaksi: 2,\n        track_order: {\n          create: {\n            id_track_template: 1,\n            created_at: new Date(ext.nowLocal()),\n          },\n        },\n      },\n    });\n\n    const getIdCustomer = await db.transaksi.findUnique({\n      where: {\n        id: Number(params.id),\n      },\n      select: {\n        id_customer: true,\n      },\n    });\n\n    const notif = db.notif.create({\n      data: {\n        title: \"Order waiting for confirmation\",\n        desc: \"Please wait for our system to verify your payment\",\n        id_customer: getIdCustomer.id_customer,\n        created_at: new Date(ext.nowLocal()),\n      },\n    });\n\n    try {\n      const yes = await db.$transaction([transaksi, notif]);\n\n      ext.socket.emit(\"admin\", {\n        event: \"notif\",\n        user_id: getIdCustomer.id_customer,\n        data: {\n          message: yes[1].title,\n          desc: yes[1].desc,\n          created_at: yes[1].created_at,\n        },\n      });\n\n      return reply.send({\n        status: \"ok\",\n        path: filePath,\n      });\n    } catch (e) {\n      return reply.status(400).send({\n        status: \"failed\",\n        reason: e.toString(),\n      });\n    }\n  } catch (e) {\n    return reply.status(400).send({\n      status: \"failed\",\n      reason: e.toString(),\n    });\n  }\n}","figma":{}},"title":"upload-bukti-pembayaran","type":"cms-template","lang":"","status":"SYSTEM","parent_id":"14213","slug":"/api/transaksi/[id]/upload-bukti","site":"*","id":"15680"}